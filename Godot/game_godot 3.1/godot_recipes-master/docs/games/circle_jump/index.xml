<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mobile Game: Circle Jump on Godot Recipes by KidsCanCode</title>
    <link>http://kidscancode.org/godot_recipes/games/circle_jump/</link>
    <description>Recent content in Mobile Game: Circle Jump on Godot Recipes by KidsCanCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://kidscancode.org/godot_recipes/games/circle_jump/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Project setup</title>
      <link>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_01/</guid>
      <description>Where to start? Depending on the game, and how fleshed-out your idea is, the answer might be very different. In our case, I&amp;rsquo;ve cheated a little bit by making a prototype of the game already and working out a few of the ideas ahead of time. Still, it diverged a bit from my initial idea, and so might this series - time will tell.
In a bigger project, you might start with design document, which could be as simple as a page of notes or as complex as a 500-page treatise laying out every detail of your game&amp;rsquo;s world, plot, and mechanics.</description>
    </item>
    
    <item>
      <title>Spawning Circles</title>
      <link>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_02/</guid>
      <description>In the previous part, we created the Jumper and Circle object that make up the bulk of the game. Now we need to add the progression: a continuous series of spawned circles as long as the player doesn&amp;rsquo;t miss.
Expanding the Main scene Let&amp;rsquo;s add some more nodes to Main:
 Position2D (&amp;ldquo;StartPosition&amp;rdquo;)
This will mark the starting position for the game. Place it near the bottom-center of the screen.</description>
    </item>
    
    <item>
      <title>Limited circles</title>
      <link>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_03/</guid>
      <description>In the first two parts, we got the basic gameplay working. Now we&amp;rsquo;re going to start adding some different modes to the circles.
Circle modes Eventually, we&amp;rsquo;ll have many different modes, but we&amp;rsquo;re going to start with the &amp;ldquo;limited&amp;rdquo; mode: the circle only allows a given number of orbits before disappearing. First, let&amp;rsquo;s add a Label node to show the number of remaining orbits. Type a number (1) in the text field so we can see how it looks.</description>
    </item>
    
    <item>
      <title>Menus</title>
      <link>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_04/</guid>
      <description>Now that we&amp;rsquo;ve got the basic gameplay, it&amp;rsquo;s time to start working on the UI. We&amp;rsquo;re going to need menu screens for the title, settings, and game over.
Menu screens The three screens will share a common layout and some functionality, so we&amp;rsquo;ll start with a base scene they can all inherit from. In the new scene, start with a CanvasLayer and name it BaseScreen. Save this scene in the &amp;ldquo;UI&amp;rdquo; folder.</description>
    </item>
    
    <item>
      <title>Score and HUD</title>
      <link>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_05/</guid>
      <description>In the last part, we added UI in the form of menus to start and configure the game. We also need a UI to display in-game information such as score.
HUD scene Add a new scene with a CanvasLayer root to be our HUD. Give it two children: a MarginContainer named &amp;ldquo;ScoreBox&amp;rdquo; and a `Label&amp;rdquo; named &amp;ldquo;Message&amp;rdquo;.
Your scene tree should look like this:
Set the layout of the ScoreBox to &amp;ldquo;Bottom Wide&amp;rdquo; and the Custom Constants all to 20.</description>
    </item>
    
    <item>
      <title>Sound and Colors</title>
      <link>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_06/</guid>
      <description>Settings singleton First, we&amp;rsquo;ll add a new script by choosing File -&amp;gt; New Script in the script tab. Name the script settings.gd.
In this script we&amp;rsquo;ll place the configuration settings for the game.
var enable_sound = true var enable_music = true var circles_per_level = 5 Add the script as an autoload by opening &amp;ldquo;Project Settings&amp;rdquo; and selecting the &amp;ldquo;Autoloads&amp;rdquo; tab. Click the folder to load the script and then click &amp;ldquo;Add&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Moving circles</title>
      <link>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_07/</guid>
      <description>Fixing a bug Our first task is to fix a bug with our menu system. Pressing the &amp;ldquo;Start&amp;rdquo; button launches a new game, but as the screen is moving off, it can be pressed again. Try &amp;ldquo;spamming&amp;rdquo; the start button - disaster ensues!
We can fix this by disabling the buttons while the screen transition is happening. Since we put all the buttons in a &amp;ldquo;buttons&amp;rdquo; group, we can easily do this with call_group().</description>
    </item>
    
    <item>
      <title>Mobile ads</title>
      <link>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_11/</guid>
      <description>About ads When building a free-to-play mobile game, you have two choices when it comes to monetization: in-app purchases and advertisement. In this part, we&amp;rsquo;ll look at how to integrate a mobile ad platform (Admob) into your game.
Ads can be unpopular and whether to use them is a decision for the individual game developer to make. We&amp;rsquo;re not making a decision on the pros and cons in this tutorial - we&amp;rsquo;re here to show you how to put ads in your game if you want them.</description>
    </item>
    
    <item>
      <title>Saving settings</title>
      <link>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/games/circle_jump/circle_jump_12/</guid>
      <description>Saving settings We&amp;rsquo;ve added three toggle properties in the game - which works fine - but the settings aren&amp;rsquo;t preserved when we quit. We need to save those settings so the next time you run the game, they persist.
First, we&amp;rsquo;ll define our settings file in res://settings.gd:
var settings_file = &amp;#34;user://settings.save&amp;#34; Next, we&amp;rsquo;ll add saving/loading functions for the three game settings that we want to save.
func save_settings(): var f = File.</description>
    </item>
    
  </channel>
</rss>