<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Physics on Godot Recipes by KidsCanCode</title>
    <link>http://kidscancode.org/godot_recipes/physics/</link>
    <description>Recent content in Physics on Godot Recipes by KidsCanCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2019 20:47:11 -0700</lastBuildDate>
    
	<atom:link href="http://kidscancode.org/godot_recipes/physics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using KinematicBody2D</title>
      <link>http://kidscancode.org/godot_recipes/physics/godot3_kinematic2d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/physics/godot3_kinematic2d/</guid>
      <description>Godot offers a number of collision objects to provide both collision detection and response. Trying to decide which one to use for your project can be confusing. You can avoid problems and simplify development if you understand how each each works and what their pros and cons are. In this tutorial, we&amp;rsquo;ll look at the KinematicBody2D node and show some examples of how it can be used.
Introduction: Physics bodies In game development you often need to know when two objects in the game space intersect or come into contact.</description>
    </item>
    
    <item>
      <title>Using Rigid Bodies</title>
      <link>http://kidscancode.org/godot_recipes/physics/godot3_kyn_rigidbody1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/physics/godot3_kyn_rigidbody1/</guid>
      <description>This tutorial was written prior to Godot Recipes. Its format will eventually be updated to match the rest of the docs on this site.
 In this tutorial, I&amp;rsquo;ll explain when (and when not) to use rigid bodies, how they work, and demonstrate a few handy tricks to bend them to your will. The examples will use RigidBody2D, but the lessons apply equally to 3D.
Introduction  RigidBody2D is the physics body in Godot that provides simulated physics.</description>
    </item>
    
    <item>
      <title>Kinematic Friction</title>
      <link>http://kidscancode.org/godot_recipes/physics/kinematic_friction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/physics/kinematic_friction/</guid>
      <description>Problem You want to add friction and acceleration to your kinematic character, giving it a smoother feel.
Solution For most games, we&amp;rsquo;re not necessarily interested in a perfect physics simulation. We want action, responsiveness, and arcade feel. This is why you choose a kinematic body over a rigid one: so that you can control its behavior directly. However, some amount of physics is good - it means an object doesn&amp;rsquo;t instantly change direction or come to a stop.</description>
    </item>
    
    <item>
      <title>RigidBody2D: Drag and Drop</title>
      <link>http://kidscancode.org/godot_recipes/physics/rigidbody_drag_drop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/physics/rigidbody_drag_drop/</guid>
      <description>Problem You want to pick up and move rigid bodies with the mouse.
Solution Working with rigid bodies can be tricky. Godot&amp;rsquo;s physics engine controls their movements, and interfering with that can often lead to unexpected results. The key is to make use of the body&amp;rsquo;s mode property. This applies equally well in 2D or 3D.
Body setup We&amp;rsquo;ll start with our rigid body object, adding a Sprite and CollisionShape2D.</description>
    </item>
    
    <item>
      <title>Kinematic to Rigid Body Interaction</title>
      <link>http://kidscancode.org/godot_recipes/physics/kinematic_to_rigidbody/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/physics/kinematic_to_rigidbody/</guid>
      <description>Problem You want your kinematic character to interact with rigid bodies.
Solution This recipe applies equally well in both 2D and 3D nodes.
 By default, a kinematic body moved with move_and_slide() or move_and_collide() will push any rigid bodies it collides with. This interaction ignores the rigid body&amp;rsquo;s physics properties due to the kinematic move function&amp;rsquo;s infinite_inertia parameter.
In some cases, this might be all you need. However, if you want to avoid &amp;ldquo;glitches&amp;rdquo; such as body overlap, tunneling, and other unrealistic behavior, you&amp;rsquo;ll need to add some code for the interactions.</description>
    </item>
    
    <item>
      <title>Using 2D Joints</title>
      <link>http://kidscancode.org/godot_recipes/physics/joints_2d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/physics/joints_2d/</guid>
      <description>Problem You&amp;rsquo;d like to understand Godot&amp;rsquo;s Joint2D nodes.
Solution Joint are used to constrain the movement of attached physics objects. For any joint node, you need to attach two bodies, which must extend from PhysicsObject2D.
Properties These properties are common to all joint nodes:
 Node A and Node B: The assigned physics bodies. Bias: The rate at which the joint pulls the two bodies back together if they move apart.</description>
    </item>
    
  </channel>
</rss>