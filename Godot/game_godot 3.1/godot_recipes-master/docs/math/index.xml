<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gamedev Math on Godot Recipes by KidsCanCode</title>
    <link>http://kidscancode.org/godot_recipes/math/</link>
    <description>Recent content in Gamedev Math on Godot Recipes by KidsCanCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2019 20:47:11 -0700</lastBuildDate>
    
	<atom:link href="http://kidscancode.org/godot_recipes/math/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interpolation</title>
      <link>http://kidscancode.org/godot_recipes/math/interpolation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/math/interpolation/</guid>
      <description>Interpolation, or its commonly-used abbreviation lerp, is a term that comes up often in game development. If you&amp;rsquo;ve never come across it before it can seem mysterious and highly-technical, but as you&amp;rsquo;ll see in this tutorial, it&amp;rsquo;s actually a straightforward concept with a wide variety of applications in game programming.
Numeric Interpolation The core formula for linear interpolation is this:
func lerp(a, b, t): return (1 - t) * a + t * b In this formula, a and b represent the two values and t is the amount of interpolation, typically expressed as a value between 0 (which returns a), and 1 (which returns b).</description>
    </item>
    
    <item>
      <title>Transforms</title>
      <link>http://kidscancode.org/godot_recipes/math/transforms/</link>
      <pubDate>Tue, 09 Apr 2019 19:49:14 -0700</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/math/transforms/</guid>
      <description>Before reading this, make sure you have an understanding of vectors and how they&amp;rsquo;re used in game development. If you don&amp;rsquo;t, I recommend you read this introduction I wrote for the Godot documentation: Vector Math.
2D Transforms In 2D space, we use the familiar X-Y coordinate plane. Remember that in Godot, as in most computer graphics applications, the Y axis points downward:
To begin, let&amp;rsquo;s consider this spaceship floating in space:</description>
    </item>
    
    <item>
      <title>Noise</title>
      <link>http://kidscancode.org/godot_recipes/math/noise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/math/noise/</guid>
      <description>Problem You want to use Godot&amp;rsquo;s OpenSimplexNoise to generate noise, noise textures, and other effects.
Solution Noise, or more specifically gradient noise is a method for generating more natural-looking &amp;ldquo;random&amp;rdquo; patterns. To do this, Godot provides the OpenSimplexNoise class.
Probably the most well-known gradient noise algorithm is called Perlin noise. Because it and its successor, simplex noise, are protected by patents, Godot uses an algorithm called OpenSimplex to generate noise.</description>
    </item>
    
  </channel>
</rss>