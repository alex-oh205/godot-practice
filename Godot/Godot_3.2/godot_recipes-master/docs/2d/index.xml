<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2D on Godot Recipes by KidsCanCode</title>
    <link>http://kidscancode.org/godot_recipes/2d/</link>
    <description>Recent content in 2D on Godot Recipes by KidsCanCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2019 20:23:45 -0700</lastBuildDate>
    
	<atom:link href="http://kidscancode.org/godot_recipes/2d/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Entering/Exiting the screen</title>
      <link>http://kidscancode.org/godot_recipes/2d/enter_exit_screen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/enter_exit_screen/</guid>
      <description>Problem You want to detect when an object enters or exits the screen.
Solution The engine provides a node for this: VisibilityNotifier2D. Attach this node to your object, and you&amp;rsquo;ll be able to use its screen_entered and screen_exited signals.
Example 1 Consider a projectile that travels in a straight line after it&amp;rsquo;s fired. If we continue firing, eventually we&amp;rsquo;ll have a large number of objects for the engine to track, event though they&amp;rsquo;re offscreen, which can cause lag.</description>
    </item>
    
    <item>
      <title>Platform character</title>
      <link>http://kidscancode.org/godot_recipes/2d/platform_character/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/platform_character/</guid>
      <description>Problem You need to make a 2D platform-style character.
Solution New developers are often surprised at how complex a platform character can be to program. Godot provides some built-in tools to assist, but there are as many solutions as there are games. In this tutorial, we won&amp;rsquo;t be going in-depth with features like double-jumps, crouching, wall-jumps, or animation. Here we&amp;rsquo;ll discuss the fundamentals of platformer movement. See the rest of the recipes for other solutions.</description>
    </item>
    
    <item>
      <title>Screen wrap</title>
      <link>http://kidscancode.org/godot_recipes/2d/screen_wrap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/screen_wrap/</guid>
      <description>Problem You want to allow the player to &amp;ldquo;wrap around&amp;rdquo; the screen, teleporting from one side of the screen to the other. This is a common feature, especially in old-school 2D games (think Pac-man).
Solution  Get your screen (viewport) size
onready var screen_size = get_viewport_rect().size get_viewport_rect() is available to any CanvasItem derived node.
 Compare your player&amp;rsquo;s position
if position.x &amp;gt; screen_size.x: position.x = 0 if position.x &amp;lt; 0: position.</description>
    </item>
    
    <item>
      <title>Splitscreen multiplayer</title>
      <link>http://kidscancode.org/godot_recipes/2d/splitscreen_demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/splitscreen_demo/</guid>
      <description>Introduction In this demo, we&amp;rsquo;ll consider a local multiplayer game - a topdown-style maze game with two players (one using arrow keys and the other using WASD controls). This is not a problem if our game world all fits on one screen, but if the map is large, we&amp;rsquo;ll want to have a &amp;ldquo;split screen&amp;rdquo; view tracking the two players separately.
We&amp;rsquo;ll also look at a quick way to set up a minimap display.</description>
    </item>
    
    <item>
      <title>TileMap: detecting tiles</title>
      <link>http://kidscancode.org/godot_recipes/2d/tilemap_collision/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/tilemap_collision/</guid>
      <description>Problem You have a KinematicBody2D character colliding with a TileMap, and you want to know which tile it collided with.
Solution When a KinematicBody2D collides, the collision data is returned in a KinematicCollision2D object. The TileMap acts as a single collider, so if you reference the collider property, it will be the TileMap node.
You then need to find out which tile in the TileMap is at the collision location.</description>
    </item>
    
    <item>
      <title>Top-down movement</title>
      <link>http://kidscancode.org/godot_recipes/2d/topdown_movement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/topdown_movement/</guid>
      <description>Problem You&amp;rsquo;re making a 2D top-down game, and you want to control a character&amp;rsquo;s movement.
Solution For this solution, we&amp;rsquo;ll assume you have the following input actions defined:
   Action Name Key(s)     &amp;quot;up&amp;quot; W,↑   &amp;quot;down&amp;quot; S,↓   &amp;quot;right&amp;quot; D,→   &amp;quot;left&amp;quot; A,←   &amp;quot;click&amp;quot; Mouse button 1    We will also assume you&amp;rsquo;re using a KinematicBody2D character.</description>
    </item>
    
    <item>
      <title>Grid-based movement</title>
      <link>http://kidscancode.org/godot_recipes/2d/grid_movement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/grid_movement/</guid>
      <description>Problem You need a 2D character that moves in a grid pattern.
Solution Grid- or tile-based movement means the character&amp;rsquo;s position is restricted. They can only stand on a particular tile - never between two tiles.
Character setup Here are the nodes we&amp;rsquo;ll use for the player:
 Area2D (&amp;ldquo;Player&amp;rdquo;): Using an Area2D means we can detect overlap (for picking up objects or colliding with enemies).  Sprite: You can use a sprite sheet here (we&amp;rsquo;ll set up the animation below).</description>
    </item>
    
    <item>
      <title>Car steering</title>
      <link>http://kidscancode.org/godot_recipes/2d/car_steering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/car_steering/</guid>
      <description>Problem You need to create a 2D top-down car controller.
Solution When approaching this problem, beginners often wind up creating something that handles nothing like a real car. Some common mistakes you&amp;rsquo;ll find in amateur car games:
 A car doesn&amp;rsquo;t rotate around its center. Put another way, a car&amp;rsquo;s rear wheels don&amp;rsquo;t slide side-to-side. (Unless it&amp;rsquo;s drifting, but we&amp;rsquo;ll talk about that later.) A car can only turn when it&amp;rsquo;s moving - it can&amp;rsquo;t spin in place.</description>
    </item>
    
    <item>
      <title>TileMap: using autotile</title>
      <link>http://kidscancode.org/godot_recipes/2d/autotile_intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/autotile_intro/</guid>
      <description>Problem You are using a TileMap, and want to use autotiling to more quickly draw your levels.
Solution For this demo, we&amp;rsquo;ll be using the following tileset:
These tiles are from Kenney&amp;rsquo;s &amp;ldquo;Topdown Shooter&amp;rdquo; art pack, which you can find here:https://kenney.nl/assets/topdown-shooter
 Creating a map from these tiles, if you were adding them one-by-one, would be a tedious process. You would be constantly changing between tiles to line up corners, intersections, and endpoints.</description>
    </item>
    
    <item>
      <title>KinematicBody2D: align with surface</title>
      <link>http://kidscancode.org/godot_recipes/2d/2d_align_surface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/2d_align_surface/</guid>
      <description>Problem You need your kinematic body to align with the surface it&amp;rsquo;s standing on.
Solution As of Godot 3.2, there is a bug preventing KinematicBody2D&amp;rsquo;s stop_on_slope parameter from working correctly. The technique in this recipe can be used as a workaround for this problem. See GitHub for details and other suggestions regarding this issue.
 We&amp;rsquo;ll start with a basic kinematic platform character. See the Platform character recipe for details.</description>
    </item>
    
    <item>
      <title>Moving Platforms</title>
      <link>http://kidscancode.org/godot_recipes/2d/moving_platforms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/moving_platforms/</guid>
      <description>Problem You need moving platforms in your 2D platformer.
Solution There are several ways to approach this problem. In this recipe, we&amp;rsquo;ll use KinematicBody2Ds for our platforms and move them with AnimationPlayer. This allows for a variety of movement styles while minimizing the amount of code we need to write.
Setting up We&amp;rsquo;ll start with a basic platformer setup using the Platform character recipe. We will need to make one small modification from that recipe: using move_and_slide_with_snap() for the movement.</description>
    </item>
    
    <item>
      <title>TileMap: animated tiles</title>
      <link>http://kidscancode.org/godot_recipes/2d/tilemap_animation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/tilemap_animation/</guid>
      <description>Problem You&amp;rsquo;d like to use animated tiles in your TileMap.
Solution The most straightforward way to approach this problem is to use the AnimatedTexture resource.
Creating an AnimatedTexture For this example, we&amp;rsquo;ll use the following water tiles:
Download these images: water.zip
Unzip the images into your project folder. In the Inspector, click the &amp;ldquo;Create a new resource&amp;rdquo; button:
Choose AnimatedTexture and set the Frames property to 5. For each frame, drag the corresponding image to its Texture property.</description>
    </item>
    
    <item>
      <title>Screen Shake</title>
      <link>http://kidscancode.org/godot_recipes/2d/screen_shake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/screen_shake/</guid>
      <description>Problem You want to create a &amp;ldquo;screen shake&amp;rdquo; effect.
Solution The &amp;ldquo;screen shake&amp;rdquo; effect is a popular way to add a dynamic feel to your game. When used well, it adds a lot of appeal. When misused, players hate it. Keep this in mind when adding it to your game and use wisely.
The effect is quite simple: when an event occurs - an explosion, a heavy object hitting an obstacle, etc.</description>
    </item>
    
    <item>
      <title>Touchscreen Camera</title>
      <link>http://kidscancode.org/godot_recipes/2d/touchscreen_camera/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/touchscreen_camera/</guid>
      <description>Problem You need a touch-controlled 2D camera for your mobile game.
Solution In this recipe, we&amp;rsquo;ll create a generic 2D camera with multiple touch controls:
 Drag to pan Pinch to zoom  Setup Our camera will extend the built-in node, so add a Camera2D to a new scene and name it &amp;ldquo;TouchCamera&amp;rdquo;. Save and attach a script.
Here are the variables we&amp;rsquo;ll need:
extends Camera2D export (NodePath) var target # Optional: export these properties for convenient editing.</description>
    </item>
    
  </channel>
</rss>