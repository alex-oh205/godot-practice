<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shaders on Godot Recipes by KidsCanCode</title>
    <link>http://kidscancode.org/godot_recipes/shaders/</link>
    <description>Recent content in Shaders on Godot Recipes by KidsCanCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2019 20:23:50 -0700</lastBuildDate>
    
	<atom:link href="http://kidscancode.org/godot_recipes/shaders/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shaders: intro</title>
      <link>http://kidscancode.org/godot_recipes/shaders/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/shaders/intro/</guid>
      <description>Problem You want to get started coding shaders.
Solution A shader is a special program that runs on the computer&amp;rsquo;s GPU (graphics card). The GPU is optimized to perform certain types of math very efficiently. Shader code can be attached to objects to affect how they&amp;rsquo;re rendered on the screen.
The output of a shader program is the color of the set of pixels of the object. Shaders can be used in 2d (canvas_item shaders) and 3D (spatial shaders).</description>
    </item>
    
    <item>
      <title>Interacting with Shaders</title>
      <link>http://kidscancode.org/godot_recipes/shaders/interacting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/shaders/interacting/</guid>
      <description> Problem You want to interact with a Godot shader from GDScript.
Solution To access the uniform&amp;rsquo;s value from GDScript, you can use set_shader_param() on the object&amp;rsquo;s material property. If the attached material is a ShaderMaterial, then you can access it like so:
node.material.get_shader_param(&amp;#34;param_name&amp;#34;, value) You can also change the value with set_shader_param().
For an example of this, see the Blur Shader recipe.
Related Recipes  Shaders: Intro  </description>
    </item>
    
    <item>
      <title>Greyscale (monochrome) shader</title>
      <link>http://kidscancode.org/godot_recipes/shaders/greyscale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/shaders/greyscale/</guid>
      <description>Problem You want a shader to convert an image to greyscale.
Solution Let&amp;rsquo;s start with a canvas_item (2D) shader. To convert to greyscale but also preserve pixel contrast, we need to average the pixel&amp;rsquo;s color value. Add the color channels together and divide by 3:
shader_type canvas_item; void fragment() { COLOR = texture(TEXTURE, UV); float avg = (COLOR.r + COLOR.g + COLOR.b) / 3.0; COLOR.rgb = vec3(avg); } You can apply this to the whole screen by adding a ColorRect (placed in a CanvasLayer to ignore camera movement) and scaling it to cover the screen.</description>
    </item>
    
    <item>
      <title>Blur shader</title>
      <link>http://kidscancode.org/godot_recipes/shaders/blur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/shaders/blur/</guid>
      <description>Problem You want a shader to blur an object or the screen.
Solution shader_type canvas_item; uniform float blur_amount : hint_range(0, 5); void fragment() { COLOR = textureLod(SCREEN_TEXTURE, SCREEN_UV, blur_amount); } For example, to gradually blur the entire screen, such as for a scene transition effect:
You can also animate the blurring:
extends Node # Add a ColorRect or other Control set to fill the screen # Place it lower in the tree and/or place in CanvasLayer # so it&amp;#39;s on top of the rest of the scene.</description>
    </item>
    
  </channel>
</rss>